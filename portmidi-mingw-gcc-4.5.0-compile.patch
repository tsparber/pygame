Index: pm_common/portmidi.c
===================================================================
--- pm_common/portmidi.c	(revision 201)
+++ pm_common/portmidi.c	(working copy)
@@ -420,7 +420,7 @@
         return pm_errmsg(err);
     }
 
-    return !Pm_QueueEmpty(midi->queue);
+    return Pm_QueueEmpty(midi->queue) ? pmNoData : pmGotData;
 }
 
 
Index: pm_win/pmwin.c
===================================================================
--- pm_win/pmwin.c	(revision 201)
+++ pm_win/pmwin.c	(working copy)
@@ -20,6 +20,7 @@
 #ifdef DEBUG
 #include "stdio.h"
 #endif
+#include <ctype.h>
 #include <windows.h>
 
 /* pm_exit is called when the program exits.
@@ -91,7 +92,7 @@
         ERROR_SUCCESS) {
         return id;
     }
-    if (RegQueryValueEx(hkey, key, NULL, &dwType, pattern, &pattern_max) != 
+    if (RegQueryValueEx(hkey, key, NULL, &dwType, (BYTE *) pattern, (DWORD *) &pattern_max) != 
 	ERROR_SUCCESS) {
         return id;
     }
Index: pm_win/pmwinmm.c
===================================================================
--- pm_win/pmwinmm.c	(revision 201)
+++ pm_win/pmwinmm.c	(working copy)
@@ -207,7 +207,7 @@
     UINT i;
     DWORD wRtn;
     midi_num_outputs = midiOutGetNumDevs();
-    midi_out_caps = pm_alloc( sizeof(MIDIOUTCAPS) * midi_num_outputs );
+    midi_out_caps = (MIDIOUTCAPS *) pm_alloc( sizeof(MIDIOUTCAPS) * midi_num_outputs );
 
     if (midi_out_caps == NULL) {
         /* no error is reported -- see pm_winmm_general_inputs */
@@ -531,10 +531,10 @@
     pm_hosterror = midiInPrepareHeader(h, hdr, sizeof(MIDIHDR));
     if (pm_hosterror) {
         pm_free(hdr);
-        return pm_hosterror;
+        return pmInsufficientMemory;
     }
     pm_hosterror = midiInAddBuffer(h, hdr, sizeof(MIDIHDR));
-    return pm_hosterror;
+    return pm_hosterror ? pmInsufficientMemory : pmNoError;
 }
 
 
@@ -626,7 +626,7 @@
 
 static PmError winmm_in_poll(PmInternal *midi) {
     midiwinmm_type m = (midiwinmm_type) midi->descriptor;
-    return m->error;
+    return m->error == MMSYSERR_NOERROR ? pmNoError : pmHostError;
 }
 
 
@@ -1206,7 +1206,7 @@
         m->hdr = hdr = get_free_output_buffer(midi);
         assert(hdr);
         midi->fill_base = (unsigned char *) m->hdr->lpData;
-        midi->fill_offset_ptr = &(hdr->dwBytesRecorded);
+        midi->fill_offset_ptr = (uint32_t *) &(hdr->dwBytesRecorded);
         /* when buffer fills, Pm_WriteSysEx will revert to calling
          * pmwin_write_byte, which expect to have space, so leave
          * one byte free for pmwin_write_byte. Leave another byte
@@ -1422,7 +1422,7 @@
     printf("pm_winmm_term called\n");
 #endif
     for (i = 0; i < pm_descriptor_index; i++) {
-        PmInternal * midi = descriptors[i].internalDescriptor;
+        PmInternal * midi = (PmInternal *) descriptors[i].internalDescriptor;
         if (midi) {
             midiwinmm_type m = (midiwinmm_type) midi->descriptor;
             if (m->handle.out) {
