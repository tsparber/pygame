pygame.gfxdraw
pygame module for drawing shapes

Wraps SDL_gfx primatives.

EXPERIMENTAL!: meaning this api may change, or dissapear in later 
pygame releases.  If you use this, your code will break with the 
next pygame release.


Most of the functions accept a color argument that is an RGB triplet.
These can also accept an RGBA quadruplet. The color argument can also be an
integer pixel value that is already mapped to the Surface's pixel format.

For all functions the arguments are strictly positional. Only integers are
accepted for coordinates and radii.

For functions like rectangle that accept a rect argument any (x, y, w, h)
sequence is accepted, though pygame.Rect instances are prefered. Note that
for a pygame.Rect the drawing will not include Rect.bottomright. The right
and bottom attributes of a Rect lie one pixel outside of the Rect's boarder.

New in pygame 1.9.0.
<SECTION>



pixel
place a pixel
pygame.gfxdraw.pixel(surface, x, y, color): return None
<END>



hline
draw a horizontal line
pygame.gfxdraw.hline(surface, x1, x2, y, color): return None
<END>



vline
draw a vertical line
pygame.gfxdraw.vline(surface, x, y1, y2, color): return None
<END>



rectangle
draw a rectangle
pygame.gfxdraw.rectangle(surface, rect, color): return None
<END>



box
draw a box
pygame.gfxdraw.box(surface, rect, color): return None
<END>



line
draw a line
pygame.gfxdraw.line(surface, x1, y1, x2, y2, color): return None
<END>



circle
draw a circle
pygame.gfxdraw.circle(surface, x, y, r, color): return None
<END>



arc
draw an arc
pygame.gfxdraw.arc(surface, x, y, r, start, end, color): return None
<END>



aacircle
draw an anti-aliased circle
pygame.gfxdraw.aacircle(surface, x, y, r, color): return None
<END>



filled_circle
draw a filled circle
pygame.gfxdraw.filled_circle(surface, x, y, r, color): return None
<END>



ellipse
draw an ellipse
pygame.gfxdraw.ellipse(surface, x, y, rx, ry, color): return None
<END>



aaellipse
draw an anti-aliased ellipse
pygame.gfxdraw.aaellipse(surface, x, y, rx, ry, color): return None
<END>



filled_ellipse
draw a filled ellipse
pygame.gfxdraw.filled_ellipse(surface, x, y, rx, ry, color): return None
<END>



pie
draw a pie
pygame.gfxdraw.pie(surface, x, y, r, start, end, color): return None
<END>



trigon
draw a triangle
pygame.gfxdraw.trigon(surface, x1, y1, x2, y2, x3, y3, color): return None
<END>



aatrigon
draw an anti-aliased triangle
pygame.gfxdraw.aatrigon(surface, x1, y1, x2, y2, x3, y3, color): return None
<END>



filled_trigon
draw a filled trigon
pygame.gfxdraw.filled_trigon(surface, x1, y1, x3, y2, x3, y3, color): return None
<END>



polygon
draw a polygon
pygame.gfxdraw.polygon(surface, points, color): return None
<END>



aapolygon
draw an anti-aliased polygon
pygame.gfxdraw.aapolygon(surface, points, color): return None
<END>



filled_polygon
draw a filled polygon
pygame.gfxdraw.filled_polygon(surface, points, color): return None
<END>



textured_polygon
draw a textured polygon
pygame.gfxdraw.textured_polygon(surface, points, texture, tx, ty): return None

A per-pixel alpha texture blit to a per-pixel alpha surface will differ from a
Surface.blit() blit. Also, a per-pixel alpha texture cannot be used with an
8-bit per pixel destination.
<END>



bezier
draw a bezier curve
pygame.gfxdraw.bezier(surface, points, steps, color): return None
<END>
<END>
